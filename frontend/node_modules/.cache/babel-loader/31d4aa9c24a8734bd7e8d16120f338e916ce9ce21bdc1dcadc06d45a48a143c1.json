{"ast":null,"code":"var _jsxFileName = \"/Users/willkoenig/Desktop/Personal Projects/Full Stack Practice/note-taking-app/src/components/HomeDir/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n\n// Import created components\nimport ControlBar from './ControlBar';\nimport NoteEditor from './NoteEditor';\n\n// Import note operation functions\nimport { addNote, getNotes, updateNote, deleteNote } from '../../services/noteFunctionalitiesServices';\n\n// Import stylesheet\nimport './Home.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home({\n  user\n}) {\n  _s();\n  // state var to hold the available notes being displayed in the editor\n  const [notes, setNotes] = useState([]);\n  // state var to hold the index of the selected note\n  const [selectedInd, setSelectedInd] = useState(notes.length);\n  // boolean state var significant of whether or not edits have been to the selected note\n  const [editsMade, setEditsMade] = useState(false);\n\n  // console.log(notes)\n  // console.log(notes[selectedInd])\n  // function to select a note\n  const handleSelectNote = () => {\n    // update the selected index\n  };\n\n  // function to bring up a new editor\n  const selectNewEditor = () => {\n    // delcare the selected index\n\n    // \n  };\n\n  // function to delete a note\n  const handleDeleteNote = () => {\n    // remove the note from the db\n\n    // remove the note from the rendered list\n  };\n\n  // function to save a note\n  const handleSave = () => {};\n\n  // function to be called initially to retrieve the users notes and prepare them\n  const generateNotes = async () => {\n    console.log('Generate notes running');\n    // retrieve users existant notes\n    const userNotes = await getNotes(user._id);\n    // update notes to include an edited content field\n    for (const note of userNotes) {\n      note.edited_content = note.content;\n    }\n\n    // updates to include an empty note for our note editor\n    const emptyNote = {\n      userID: user._id,\n      noteID: 'new_note',\n      title: '',\n      content: '',\n      edited_content: '',\n      date: new Date().toLocaleString('en-US', {\n        timeZone: 'America/New_York',\n        year: '2-digit',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      })\n    };\n    userNotes.push(emptyNote);\n    setNotes(userNotes);\n  };\n\n  // on mount update SV to include preprocessed notes\n  useEffect(() => {\n    generateNotes();\n  }, []);\n\n  // // State var to hold the note currently displayed by the editor\n  // const [selectedNote, setSelectedNote] = useState({\n  //   userID: user._id,\n  //   noteID: 'new_note',\n  //   title: '',\n  //   content: '',\n  //   date: new Date().toLocaleString('en-US', { \n  //     timeZone: 'America/New_York', \n  //     year: '2-digit', \n  //     month: '2-digit', \n  //     day: '2-digit', \n  //     hour: '2-digit', \n  //     minute: '2-digit' })\n  // })\n\n  // const [selectedInd, setSelectedInd] = useState('new_note')\n  // const [userNotes, setUserNotes] = useState([])\n  // const [editsMade, setEditsMade] = useState(true)\n\n  // // Initially set the Title of a note\n  // const handleTitleChange = (event) => {\n  //   console.log('New Title', event.target.value)\n  //   setSelectedNote({\n  //     ...selectedNote,\n  //     title: event.target.value,\n  //   });\n  // };\n\n  // // Make updates to the content of the note\n  // const handleContentChange = (event) => {\n  //   console.log('New Content', event.target.value)\n  //   setSelectedNote({\n  //     ...selectedNote,\n  //     content: event.target.value,\n  //   });\n  // };\n\n  // // Save note function\n  // const handleSave = async () => {\n  //   // case where we are creating a new note\n  //   if (selectedNote.noteID == 'new_note'){\n  //     const response = await addNote(\n  //       selectedNote.userID,\n  //       selectedNote.date,\n  //       selectedNote.title,\n  //       selectedNote.content)\n  //     setUserNotes(response)\n  //   } else {\n  //   // case where we are creating a new note\n  //     const response = await updateNote(selectedNote.noteID, selectedNote.content)\n  //     userNotes[selectedInd] = response\n  //   }\n  //   // update the users stored notes\n  // }\n\n  // // handle select note or select new_note\n  // const handleSelectNote = (index) => {\n  //   if (index == 'new_note'){\n  //     setSelectedNote({\n  //       ...selectedNote,\n  //       noteID: 'new_note',\n  //       content: '',\n  //       title: '',\n  //       date: new Date().toLocaleString('en-US', { \n  //         timeZone: 'America/New_York', \n  //         year: '2-digit', \n  //         month: '2-digit', \n  //         day: '2-digit', \n  //         hour: '2-digit', \n  //         minute: '2-digit' \n  //       })\n  //     })\n  //   } else {\n  //     const note = userNotes[index]\n  //     setSelectedNote({\n  //       ...selectedNote,\n  //       noteID: note._id,\n  //       content: note.content,\n  //       date: note.date,\n  //       title: note.title\n  //   })\n  //   }\n  //   setSelectedInd(index)\n  // }\n\n  // const handleGetNotes = async () => {\n  //   const userNotes = await getNotes(user._id)\n  //   console.log('existing userNotes: ', userNotes)\n  //   setUserNotes(userNotes)\n  // }\n\n  // const handleDeleteNote = async () => {\n  //   // delete the note and update the list of displayed notes\n  //   const response = await deleteNote(selectedNote.userID, selectedNote.noteID)\n  //   handleGetNotes()\n\n  //   // reassign the selected note to be the first note in the list\n  //   if (userNotes != []){\n  //     // if the list is not empty assign the selected note to the first element\n  //     handleSelectNote(0)\n  //   } else {\n  //     // if the list is empty assign it to the new note editor\n\n  //   }\n  // }\n\n  // // useEffect to generate a new list of notes each time:\n  // // - when a note is updated\n  // // - when a note is added or deleted\n  // // - when the component is initially rendered\n  // useEffect(() => {\n  //   console.log(`Calling useEffect to generate new notes`)\n  //   handleGetNotes()\n  // }, [])\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"homeContainer\",\n    children: [/*#__PURE__*/_jsxDEV(ControlBar, {\n      notes: notes,\n      selected_ind: selectedInd,\n      selectNote: handleSelectNote,\n      handleSave: handleSave,\n      handleDeleteNote: handleDeleteNote,\n      editsMade: editsMade\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NoteEditor, {\n      note: notes[selectedInd],\n      handleTitleChange: console.log('title change'),\n      handleContentChange: console.log('content change')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"L9fhWUwCIw7bW5tGjv8ZoiZmp+o=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","ControlBar","NoteEditor","addNote","getNotes","updateNote","deleteNote","jsxDEV","_jsxDEV","Home","user","_s","notes","setNotes","selectedInd","setSelectedInd","length","editsMade","setEditsMade","handleSelectNote","selectNewEditor","handleDeleteNote","handleSave","generateNotes","console","log","userNotes","_id","note","edited_content","content","emptyNote","userID","noteID","title","date","Date","toLocaleString","timeZone","year","month","day","hour","minute","push","className","children","selected_ind","selectNote","fileName","_jsxFileName","lineNumber","columnNumber","handleTitleChange","handleContentChange","_c","$RefreshReg$"],"sources":["/Users/willkoenig/Desktop/Personal Projects/Full Stack Practice/note-taking-app/src/components/HomeDir/Home.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\n\n// Import created components\nimport ControlBar from './ControlBar'\nimport NoteEditor from './NoteEditor'\n\n// Import note operation functions\nimport { addNote, \n  getNotes, \n  updateNote, \n  deleteNote } from '../../services/noteFunctionalitiesServices'\n\n// Import stylesheet\nimport './Home.css'\n\nexport default function Home({ user }) {\n\n  // state var to hold the available notes being displayed in the editor\n  const [notes, setNotes] = useState([])\n  // state var to hold the index of the selected note\n  const [selectedInd, setSelectedInd] = useState(notes.length)\n  // boolean state var significant of whether or not edits have been to the selected note\n  const [editsMade, setEditsMade] = useState(false)\n\n  // console.log(notes)\n  // console.log(notes[selectedInd])\n  // function to select a note\n  const handleSelectNote = () => {\n    // update the selected index\n\n  }\n\n  // function to bring up a new editor\n  const selectNewEditor = () => {\n    // delcare the selected index\n\n    // \n  }\n\n  // function to delete a note\n  const handleDeleteNote = () => {\n    // remove the note from the db\n\n    // remove the note from the rendered list\n  }\n\n  // function to save a note\n  const handleSave = () => {\n\n  }\n\n  // function to be called initially to retrieve the users notes and prepare them\n  const generateNotes = async () => {\n    console.log('Generate notes running')\n    // retrieve users existant notes\n    const userNotes = await getNotes(user._id)\n    // update notes to include an edited content field\n    for (const note of userNotes){\n      note.edited_content = note.content\n    }\n\n    // updates to include an empty note for our note editor\n    const emptyNote = {\n      userID: user._id,\n      noteID: 'new_note',\n      title: '',\n      content: '',\n      edited_content: '',\n      date: new Date().toLocaleString('en-US', { \n        timeZone: 'America/New_York', \n        year: '2-digit', \n        month: '2-digit', \n        day: '2-digit', \n        hour: '2-digit', \n        minute: '2-digit' })\n    }\n    userNotes.push(emptyNote)\n    setNotes(userNotes)\n  }\n  \n  // on mount update SV to include preprocessed notes\n  useEffect(() => {\n    generateNotes()\n  }, [])\n\n  \n  // // State var to hold the note currently displayed by the editor\n  // const [selectedNote, setSelectedNote] = useState({\n  //   userID: user._id,\n  //   noteID: 'new_note',\n  //   title: '',\n  //   content: '',\n  //   date: new Date().toLocaleString('en-US', { \n  //     timeZone: 'America/New_York', \n  //     year: '2-digit', \n  //     month: '2-digit', \n  //     day: '2-digit', \n  //     hour: '2-digit', \n  //     minute: '2-digit' })\n  // })\n\n  // const [selectedInd, setSelectedInd] = useState('new_note')\n  // const [userNotes, setUserNotes] = useState([])\n  // const [editsMade, setEditsMade] = useState(true)\n\n  // // Initially set the Title of a note\n  // const handleTitleChange = (event) => {\n  //   console.log('New Title', event.target.value)\n  //   setSelectedNote({\n  //     ...selectedNote,\n  //     title: event.target.value,\n  //   });\n  // };\n\n  // // Make updates to the content of the note\n  // const handleContentChange = (event) => {\n  //   console.log('New Content', event.target.value)\n  //   setSelectedNote({\n  //     ...selectedNote,\n  //     content: event.target.value,\n  //   });\n  // };\n\n  // // Save note function\n  // const handleSave = async () => {\n  //   // case where we are creating a new note\n  //   if (selectedNote.noteID == 'new_note'){\n  //     const response = await addNote(\n  //       selectedNote.userID,\n  //       selectedNote.date,\n  //       selectedNote.title,\n  //       selectedNote.content)\n  //     setUserNotes(response)\n  //   } else {\n  //   // case where we are creating a new note\n  //     const response = await updateNote(selectedNote.noteID, selectedNote.content)\n  //     userNotes[selectedInd] = response\n  //   }\n  //   // update the users stored notes\n  // }\n\n  // // handle select note or select new_note\n  // const handleSelectNote = (index) => {\n  //   if (index == 'new_note'){\n  //     setSelectedNote({\n  //       ...selectedNote,\n  //       noteID: 'new_note',\n  //       content: '',\n  //       title: '',\n  //       date: new Date().toLocaleString('en-US', { \n  //         timeZone: 'America/New_York', \n  //         year: '2-digit', \n  //         month: '2-digit', \n  //         day: '2-digit', \n  //         hour: '2-digit', \n  //         minute: '2-digit' \n  //       })\n  //     })\n  //   } else {\n  //     const note = userNotes[index]\n  //     setSelectedNote({\n  //       ...selectedNote,\n  //       noteID: note._id,\n  //       content: note.content,\n  //       date: note.date,\n  //       title: note.title\n  //   })\n  //   }\n  //   setSelectedInd(index)\n  // }\n\n  // const handleGetNotes = async () => {\n  //   const userNotes = await getNotes(user._id)\n  //   console.log('existing userNotes: ', userNotes)\n  //   setUserNotes(userNotes)\n  // }\n\n  // const handleDeleteNote = async () => {\n  //   // delete the note and update the list of displayed notes\n  //   const response = await deleteNote(selectedNote.userID, selectedNote.noteID)\n  //   handleGetNotes()\n\n  //   // reassign the selected note to be the first note in the list\n  //   if (userNotes != []){\n  //     // if the list is not empty assign the selected note to the first element\n  //     handleSelectNote(0)\n  //   } else {\n  //     // if the list is empty assign it to the new note editor\n      \n  //   }\n  // }\n\n  // // useEffect to generate a new list of notes each time:\n  // // - when a note is updated\n  // // - when a note is added or deleted\n  // // - when the component is initially rendered\n  // useEffect(() => {\n  //   console.log(`Calling useEffect to generate new notes`)\n  //   handleGetNotes()\n  // }, [])\n\n  return (\n    <div className='homeContainer'>\n      <ControlBar \n        notes={notes}\n        selected_ind={selectedInd}\n        selectNote={handleSelectNote} \n        handleSave={handleSave}\n        handleDeleteNote={handleDeleteNote}\n        editsMade={editsMade}/>\n      <NoteEditor \n        note={notes[selectedInd]}\n        handleTitleChange={console.log('title change')}\n        handleContentChange={console.log('content change')}/>\n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}