{"ast":null,"code":"var _jsxFileName = \"/Users/willkoenig/Desktop/Personal Projects/Full Stack Practice/note-taking-app/src/components/HomeDir/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n\n// Import created components\nimport ControlBar from './ControlBar';\nimport NoteEditor from './NoteEditor';\n\n// Import note operation functions\nimport { addNote, getNotes, updateNote, deleteNote } from '../../services/noteFunctionalitiesServices';\n\n// Import stylesheet\nimport './Home.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home({\n  user\n}) {\n  _s();\n  // State var to hold the note currently displayed by the editor\n  const [selectedNote, setSelectedNote] = useState({\n    userID: user.userData._id,\n    noteID: 'new_note',\n    title: '',\n    content: '',\n    date: new Date().toLocaleString('en-US', {\n      timeZone: 'America/New_York',\n      year: '2-digit',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    })\n  });\n  const [userNotes, setUserNotes] = useState([]);\n  const handleTitleChange = event => {\n    setSelectedNote({\n      ...selectedNote,\n      title: event.target.value\n    });\n  };\n  const handleContentChange = event => {\n    setSelectedNote({\n      ...selectedNote,\n      content: event.target.value\n    });\n  };\n  const handleSave = async () => {\n    if (selectedNote.noteID == 'new_note') {\n      const response = await addNote(selectedNote.userID, selectedNote.date, selectedNote.title, selectedNote.content);\n      setUserNotes(response);\n    } else {}\n    // update the users stored notes\n  };\n\n  const handleAddNote = () => {};\n  const handleGetNotes = async () => {\n    const response = await getNotes(user.userData._id);\n    console.log(response);\n    setUserNotes(response);\n  };\n  const handleUpdateNote = () => {};\n  const handleDeleteNote = () => {};\n  useEffect(() => {\n    handleGetNotes();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"homeContainer\",\n    children: [/*#__PURE__*/_jsxDEV(ControlBar, {\n      notes: userNotes,\n      handleSave: handleSave\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NoteEditor, {\n      note: selectedNote,\n      handleTitleChange: handleTitleChange,\n      handleContentChange: handleContentChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"liTw8/uyn4rVt5jLQ7sF6RbxZro=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","ControlBar","NoteEditor","addNote","getNotes","updateNote","deleteNote","jsxDEV","_jsxDEV","Home","user","_s","selectedNote","setSelectedNote","userID","userData","_id","noteID","title","content","date","Date","toLocaleString","timeZone","year","month","day","hour","minute","userNotes","setUserNotes","handleTitleChange","event","target","value","handleContentChange","handleSave","response","handleAddNote","handleGetNotes","console","log","handleUpdateNote","handleDeleteNote","className","children","notes","fileName","_jsxFileName","lineNumber","columnNumber","note","_c","$RefreshReg$"],"sources":["/Users/willkoenig/Desktop/Personal Projects/Full Stack Practice/note-taking-app/src/components/HomeDir/Home.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\n\n// Import created components\nimport ControlBar from './ControlBar'\nimport NoteEditor from './NoteEditor'\n\n// Import note operation functions\nimport { addNote, \n  getNotes, \n  updateNote, \n  deleteNote } from '../../services/noteFunctionalitiesServices'\n\n// Import stylesheet\nimport './Home.css'\n\nexport default function Home({ user }) {\n  // State var to hold the note currently displayed by the editor\n  const [selectedNote, setSelectedNote] = useState({\n    userID: user.userData._id,\n    noteID: 'new_note',\n    title: '',\n    content: '',\n    date: new Date().toLocaleString('en-US', { \n      timeZone: 'America/New_York', \n      year: '2-digit', \n      month: '2-digit', \n      day: '2-digit', \n      hour: '2-digit', \n      minute: '2-digit' })\n  })\n\n  const [userNotes, setUserNotes] = useState([])\n\n  const handleTitleChange = (event) => {\n    setSelectedNote({\n      ...selectedNote,\n      title: event.target.value,\n    });\n  };\n\n  const handleContentChange = (event) => {\n    setSelectedNote({\n      ...selectedNote,\n      content: event.target.value,\n    });\n  };\n\n  const handleSave = async () => {\n    if (selectedNote.noteID == 'new_note'){\n      const response = await addNote(\n        selectedNote.userID,\n        selectedNote.date,\n        selectedNote.title,\n        selectedNote.content)\n      setUserNotes(response)\n    } else {\n\n    }\n    // update the users stored notes\n\n  }\n\n  const handleAddNote = () => {\n\n  }\n\n  const handleGetNotes = async () => {\n    const response = await getNotes(user.userData._id)\n    console.log(response)\n    setUserNotes(response)\n  }\n\n  const handleUpdateNote = () => {\n    \n  }\n\n  const handleDeleteNote = () => {\n    \n  }\n\n  useEffect(() => {\n    handleGetNotes()\n  }, [])\n\n  return (\n    <div className='homeContainer'>\n      <ControlBar notes={userNotes} handleSave={handleSave}/>\n      <NoteEditor \n        note={selectedNote}\n        handleTitleChange={handleTitleChange}\n        handleContentChange={handleContentChange}/>\n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}