{"ast":null,"code":"var _jsxFileName = \"/Users/willkoenig/Desktop/Personal Projects/Full Stack Practice/note-taking-app/src/components/HomeDir/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n\n// Import created components\nimport ControlBar from './ControlBar';\nimport NoteEditor from './NoteEditor';\n\n// Import note operation functions\nimport { addNote, getNotes, updateNote, deleteNote } from '../../services/noteFunctionalitiesServices';\n\n// Import stylesheet\nimport './Home.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home({\n  user\n}) {\n  _s();\n  const [notes, setNotes] = useState([]);\n\n  // on mount update SV to include preprocessed notes\n  useEffect(() => {\n    const generateNotes = async () => {\n      const userNotes = await getNotes(user._id);\n      for (const note in userNotes) {\n        note.edited_content = note.content;\n      }\n      console.log('edited userNotes ', userNotes);\n    };\n  }, []);\n\n  // State var to hold the note currently displayed by the editor\n  const [selectedNote, setSelectedNote] = useState({\n    userID: user._id,\n    noteID: 'new_note',\n    title: '',\n    content: '',\n    date: new Date().toLocaleString('en-US', {\n      timeZone: 'America/New_York',\n      year: '2-digit',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    })\n  });\n  const [selectedInd, setSelectedInd] = useState('new_note');\n  const [userNotes, setUserNotes] = useState([]);\n  const [editsMade, setEditsMade] = useState(true);\n\n  // Initially set the Title of a note\n  const handleTitleChange = event => {\n    console.log('New Title', event.target.value);\n    setSelectedNote({\n      ...selectedNote,\n      title: event.target.value\n    });\n  };\n\n  // Make updates to the content of the note\n  const handleContentChange = event => {\n    console.log('New Content', event.target.value);\n    setSelectedNote({\n      ...selectedNote,\n      content: event.target.value\n    });\n  };\n\n  // Save note function\n  const handleSave = async () => {\n    // case where we are creating a new note\n    if (selectedNote.noteID == 'new_note') {\n      const response = await addNote(selectedNote.userID, selectedNote.date, selectedNote.title, selectedNote.content);\n      setUserNotes(response);\n    } else {\n      // case where we are creating a new note\n      const response = await updateNote(selectedNote.noteID, selectedNote.content);\n      userNotes[selectedInd] = response;\n    }\n    // update the users stored notes\n  };\n\n  // handle select note or select new_note\n  const handleSelectNote = index => {\n    if (index == 'new_note') {\n      setSelectedNote({\n        ...selectedNote,\n        noteID: 'new_note',\n        content: '',\n        title: '',\n        date: new Date().toLocaleString('en-US', {\n          timeZone: 'America/New_York',\n          year: '2-digit',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit'\n        })\n      });\n    } else {\n      const note = userNotes[index];\n      setSelectedNote({\n        ...selectedNote,\n        noteID: note._id,\n        content: note.content,\n        date: note.date,\n        title: note.title\n      });\n    }\n    setSelectedInd(index);\n  };\n  const handleGetNotes = async () => {\n    const userNotes = await getNotes(user._id);\n    console.log('existing userNotes: ', userNotes);\n    setUserNotes(userNotes);\n  };\n  const handleDeleteNote = async () => {\n    // delete the note and update the list of displayed notes\n    const response = await deleteNote(selectedNote.userID, selectedNote.noteID);\n    handleGetNotes();\n\n    // reassign the selected note to be the first note in the list\n    if (userNotes != []) {\n      // if the list is not empty assign the selected note to the first element\n      handleSelectNote(0);\n    } else {\n      // if the list is empty assign it to the new note editor\n    }\n  };\n\n  // useEffect to generate a new list of notes each time:\n  // - when a note is updated\n  // - when a note is added or deleted\n  // - when the component is initially rendered\n  useEffect(() => {\n    console.log(`Calling useEffect to generate new notes`);\n    handleGetNotes();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"homeContainer\",\n    children: [/*#__PURE__*/_jsxDEV(ControlBar, {\n      notes: userNotes,\n      selected_ind: selectedInd,\n      selectNote: handleSelectNote,\n      handleSave: handleSave,\n      handleDeleteNote: handleDeleteNote,\n      editsMade: editsMade\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NoteEditor, {\n      note: selectedNote,\n      handleTitleChange: handleTitleChange,\n      handleContentChange: handleContentChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"zBF7F5hjMeA+d5Oh2stF9HWNeCw=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","ControlBar","NoteEditor","addNote","getNotes","updateNote","deleteNote","jsxDEV","_jsxDEV","Home","user","_s","notes","setNotes","generateNotes","userNotes","_id","note","edited_content","content","console","log","selectedNote","setSelectedNote","userID","noteID","title","date","Date","toLocaleString","timeZone","year","month","day","hour","minute","selectedInd","setSelectedInd","setUserNotes","editsMade","setEditsMade","handleTitleChange","event","target","value","handleContentChange","handleSave","response","handleSelectNote","index","handleGetNotes","handleDeleteNote","className","children","selected_ind","selectNote","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/willkoenig/Desktop/Personal Projects/Full Stack Practice/note-taking-app/src/components/HomeDir/Home.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\n\n// Import created components\nimport ControlBar from './ControlBar'\nimport NoteEditor from './NoteEditor'\n\n// Import note operation functions\nimport { addNote, \n  getNotes, \n  updateNote, \n  deleteNote } from '../../services/noteFunctionalitiesServices'\n\n// Import stylesheet\nimport './Home.css'\n\nexport default function Home({ user }) {\n\n  const [notes, setNotes] = useState([])\n  \n  // on mount update SV to include preprocessed notes\n  useEffect(() => {\n    const generateNotes = async () => {\n      const userNotes = await getNotes(user._id)\n\n      for (const note in userNotes){\n        note.edited_content = note.content\n      }\n\n      console.log('edited userNotes ', userNotes)\n\n    }\n\n\n  }, [])\n\n\n\n\n\n\n\n\n\n\n  \n  // State var to hold the note currently displayed by the editor\n  const [selectedNote, setSelectedNote] = useState({\n    userID: user._id,\n    noteID: 'new_note',\n    title: '',\n    content: '',\n    date: new Date().toLocaleString('en-US', { \n      timeZone: 'America/New_York', \n      year: '2-digit', \n      month: '2-digit', \n      day: '2-digit', \n      hour: '2-digit', \n      minute: '2-digit' })\n  })\n\n  const [selectedInd, setSelectedInd] = useState('new_note')\n  const [userNotes, setUserNotes] = useState([])\n  const [editsMade, setEditsMade] = useState(true)\n\n  // Initially set the Title of a note\n  const handleTitleChange = (event) => {\n    console.log('New Title', event.target.value)\n    setSelectedNote({\n      ...selectedNote,\n      title: event.target.value,\n    });\n  };\n\n  // Make updates to the content of the note\n  const handleContentChange = (event) => {\n    console.log('New Content', event.target.value)\n    setSelectedNote({\n      ...selectedNote,\n      content: event.target.value,\n    });\n  };\n\n  // Save note function\n  const handleSave = async () => {\n    // case where we are creating a new note\n    if (selectedNote.noteID == 'new_note'){\n      const response = await addNote(\n        selectedNote.userID,\n        selectedNote.date,\n        selectedNote.title,\n        selectedNote.content)\n      setUserNotes(response)\n    } else {\n    // case where we are creating a new note\n      const response = await updateNote(selectedNote.noteID, selectedNote.content)\n      userNotes[selectedInd] = response\n    }\n    // update the users stored notes\n  }\n\n  // handle select note or select new_note\n  const handleSelectNote = (index) => {\n    if (index == 'new_note'){\n      setSelectedNote({\n        ...selectedNote,\n        noteID: 'new_note',\n        content: '',\n        title: '',\n        date: new Date().toLocaleString('en-US', { \n          timeZone: 'America/New_York', \n          year: '2-digit', \n          month: '2-digit', \n          day: '2-digit', \n          hour: '2-digit', \n          minute: '2-digit' \n        })\n      })\n    } else {\n      const note = userNotes[index]\n      setSelectedNote({\n        ...selectedNote,\n        noteID: note._id,\n        content: note.content,\n        date: note.date,\n        title: note.title\n    })\n    }\n    setSelectedInd(index)\n  }\n\n  const handleGetNotes = async () => {\n    const userNotes = await getNotes(user._id)\n    console.log('existing userNotes: ', userNotes)\n    setUserNotes(userNotes)\n  }\n\n  const handleDeleteNote = async () => {\n    // delete the note and update the list of displayed notes\n    const response = await deleteNote(selectedNote.userID, selectedNote.noteID)\n    handleGetNotes()\n\n    // reassign the selected note to be the first note in the list\n    if (userNotes != []){\n      // if the list is not empty assign the selected note to the first element\n      handleSelectNote(0)\n    } else {\n      // if the list is empty assign it to the new note editor\n      \n    }\n  }\n\n  // useEffect to generate a new list of notes each time:\n  // - when a note is updated\n  // - when a note is added or deleted\n  // - when the component is initially rendered\n  useEffect(() => {\n    console.log(`Calling useEffect to generate new notes`)\n    handleGetNotes()\n  }, [])\n\n  return (\n    <div className='homeContainer'>\n      <ControlBar \n        notes={userNotes}\n        selected_ind={selectedInd}\n        selectNote={handleSelectNote} \n        handleSave={handleSave}\n        handleDeleteNote={handleDeleteNote}\n        editsMade={editsMade}/>\n      <NoteEditor \n        note={selectedNote}\n        handleTitleChange={handleTitleChange}\n        handleContentChange={handleContentChange}/>\n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}