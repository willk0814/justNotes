{"ast":null,"code":"var _jsxFileName = \"/Users/willkoenig/Desktop/Personal Projects/Full Stack Practice/note-taking-app/src/components/HomeDir/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n\n// Import created components\nimport ControlBar from './ControlBar';\nimport NoteEditor from './NoteEditor';\n\n// Import note operation functions\nimport { addNote, getNotes, updateNote, deleteNote } from '../../services/noteFunctionalitiesServices';\n\n// Import stylesheet\nimport './Home.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home({\n  user\n}) {\n  _s();\n  const emptyNote = {\n    userID: user._id,\n    noteID: 'new_note',\n    title: '',\n    content: '',\n    date: new Date().toLocaleString('en-US', {\n      timeZone: 'America/New_York',\n      year: '2-digit',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    })\n  };\n  const [notes, setNotes] = useState([emptyNote]);\n  const [selectedInd, setSelectedInd] = useState(-1);\n  const [selectedNote, setSelectedNote] = useState({});\n  const [editsMade, setEditsMade] = useState(false);\n  const handleSave = async () => {\n    console.log('saving');\n  };\n  const handleDeleteNote = async () => {\n    console.log('deleting');\n  };\n  const handleSelectNote = ind => {\n    console.log('Selecting index', ind);\n  };\n  const handleTitleChange = updated_Title => {\n    console.log('Handling title change', updated_Title);\n  };\n  const handleContentChange = updated_content => {\n    console.log('handling updated content', updated_content);\n  };\n\n  // Set the user notes on mount\n  useEffect(() => {\n    const handleGetUserNotes = async () => {\n      const userNotes = await getNotes(user._id);\n      console.log('Retreived user notes');\n      setNotes(userNotes);\n    };\n    handleGetUserNotes();\n  }, []);\n\n  // Change the selected note whenever the selectedInd changes\n  useEffect(() => {\n    setSelectedNote(notes[selectedInd]);\n  }, [selectedInd]);\n\n  // // State var to hold the note currently displayed by the editor\n  // const [selectedNote, setSelectedNote] = useState({\n  //   userID: user._id,\n  //   noteID: 'new_note',\n  //   title: '',\n  //   content: '',\n  //   date: new Date().toLocaleString('en-US', { \n  //     timeZone: 'America/New_York', \n  //     year: '2-digit', \n  //     month: '2-digit', \n  //     day: '2-digit', \n  //     hour: '2-digit', \n  //     minute: '2-digit' })\n  // })\n\n  // const [selectedInd, setSelectedInd] = useState('new_note')\n  // const [userNotes, setUserNotes] = useState([])\n  // const [editsMade, setEditsMade] = useState(true)\n\n  // // Initially set the Title of a note\n  // const handleTitleChange = (event) => {\n  //   console.log('New Title', event.target.value)\n  //   setSelectedNote({\n  //     ...selectedNote,\n  //     title: event.target.value,\n  //   });\n  // };\n\n  // // Make updates to the content of the note\n  // const handleContentChange = (event) => {\n  //   console.log('New Content', event.target.value)\n  //   setSelectedNote({\n  //     ...selectedNote,\n  //     content: event.target.value,\n  //   });\n  // };\n\n  // // Save note function\n  // const handleSave = async () => {\n  //   // case where we are creating a new note\n  //   if (selectedNote.noteID == 'new_note'){\n  //     const response = await addNote(\n  //       selectedNote.userID,\n  //       selectedNote.date,\n  //       selectedNote.title,\n  //       selectedNote.content)\n  //     setUserNotes(response)\n  //   } else {\n  //   // case where we are creating a new note\n  //     const response = await updateNote(selectedNote.noteID, selectedNote.content)\n  //     userNotes[selectedInd] = response\n  //   }\n  //   // update the users stored notes\n  // }\n\n  // // handle select note or select new_note\n  // const handleSelectNote = (index) => {\n  //   if (index == 'new_note'){\n  //     setSelectedNote({\n  //       ...selectedNote,\n  //       noteID: 'new_note',\n  //       content: '',\n  //       title: '',\n  //       date: new Date().toLocaleString('en-US', { \n  //         timeZone: 'America/New_York', \n  //         year: '2-digit', \n  //         month: '2-digit', \n  //         day: '2-digit', \n  //         hour: '2-digit', \n  //         minute: '2-digit' \n  //       })\n  //     })\n  //   } else {\n  //     const note = userNotes[index]\n  //     setSelectedNote({\n  //       ...selectedNote,\n  //       noteID: note._id,\n  //       content: note.content,\n  //       date: note.date,\n  //       title: note.title\n  //   })\n  //   }\n  //   setSelectedInd(index)\n  // }\n\n  // const handleGetNotes = async () => {\n  //   const userNotes = await getNotes(user._id)\n  //   console.log('existing userNotes: ', userNotes)\n  //   setUserNotes(userNotes)\n  // }\n\n  // const handleDeleteNote = async () => {\n  //   // delete the note and update the list of displayed notes\n  //   const response = await deleteNote(selectedNote.userID, selectedNote.noteID)\n  //   handleGetNotes()\n\n  //   // reassign the selected note to be the first note in the list\n  //   if (userNotes != []){\n  //     // if the list is not empty assign the selected note to the first element\n  //     handleSelectNote(0)\n  //   } else {\n  //     // if the list is empty assign it to the new note editor\n\n  //   }\n  // }\n\n  // // useEffect to generate a new list of notes each time:\n  // // - when a note is updated\n  // // - when a note is added or deleted\n  // // - when the component is initially rendered\n  // useEffect(() => {\n  //   console.log(`Calling useEffect to generate new notes`)\n  //   handleGetNotes()\n  // }, [])\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"homeContainer\",\n    children: [/*#__PURE__*/_jsxDEV(ControlBar, {\n      notes: notes,\n      selected_ind: selectedInd,\n      selectNote: handleSelectNote,\n      handleSave: handleSave,\n      handleDeleteNote: handleDeleteNote,\n      editsMade: editsMade\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NoteEditor, {\n      note: selectedNote,\n      handleTitleChange: handleTitleChange,\n      handleContentChange: handleContentChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"65P9AsCzM4CbEi9+n94Bi2VZ0Ng=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","ControlBar","NoteEditor","addNote","getNotes","updateNote","deleteNote","jsxDEV","_jsxDEV","Home","user","_s","emptyNote","userID","_id","noteID","title","content","date","Date","toLocaleString","timeZone","year","month","day","hour","minute","notes","setNotes","selectedInd","setSelectedInd","selectedNote","setSelectedNote","editsMade","setEditsMade","handleSave","console","log","handleDeleteNote","handleSelectNote","ind","handleTitleChange","updated_Title","handleContentChange","updated_content","handleGetUserNotes","userNotes","className","children","selected_ind","selectNote","fileName","_jsxFileName","lineNumber","columnNumber","note","_c","$RefreshReg$"],"sources":["/Users/willkoenig/Desktop/Personal Projects/Full Stack Practice/note-taking-app/src/components/HomeDir/Home.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\n\n// Import created components\nimport ControlBar from './ControlBar'\nimport NoteEditor from './NoteEditor'\n\n// Import note operation functions\nimport { addNote, \n  getNotes, \n  updateNote, \n  deleteNote } from '../../services/noteFunctionalitiesServices'\n\n// Import stylesheet\nimport './Home.css'\n\nexport default function Home({ user }) {\n\n  const emptyNote = ({\n    userID: user._id,\n    noteID: 'new_note',\n    title: '',\n    content: '',\n    date: new Date().toLocaleString('en-US', { \n      timeZone: 'America/New_York', \n      year: '2-digit', \n      month: '2-digit', \n      day: '2-digit', \n      hour: '2-digit', \n      minute: '2-digit' })\n  })\n\n  const [notes, setNotes] = useState([emptyNote])\n  const [selectedInd, setSelectedInd] = useState(-1)\n  const [selectedNote, setSelectedNote] = useState({})\n  const [editsMade, setEditsMade] = useState(false)\n\n  const handleSave = async () => {\n    console.log('saving')\n  }\n\n  const handleDeleteNote = async () => {\n    console.log('deleting')\n  }\n\n  const handleSelectNote = (ind) => {\n    console.log('Selecting index', ind)\n  }\n\n  const handleTitleChange = (updated_Title) => {\n    console.log('Handling title change', updated_Title)\n  }\n\n  const handleContentChange = (updated_content) => {\n    console.log('handling updated content', updated_content)\n  } \n\n  // Set the user notes on mount\n  useEffect(() => {\n    const handleGetUserNotes = async() => {\n      const userNotes = await getNotes(user._id)\n      console.log('Retreived user notes')\n      setNotes(userNotes)\n    }\n    handleGetUserNotes()\n  }, [])\n\n  // Change the selected note whenever the selectedInd changes\n  useEffect(() => {\n    setSelectedNote(notes[selectedInd])\n  }, [selectedInd])\n\n  // // State var to hold the note currently displayed by the editor\n  // const [selectedNote, setSelectedNote] = useState({\n  //   userID: user._id,\n  //   noteID: 'new_note',\n  //   title: '',\n  //   content: '',\n  //   date: new Date().toLocaleString('en-US', { \n  //     timeZone: 'America/New_York', \n  //     year: '2-digit', \n  //     month: '2-digit', \n  //     day: '2-digit', \n  //     hour: '2-digit', \n  //     minute: '2-digit' })\n  // })\n\n  // const [selectedInd, setSelectedInd] = useState('new_note')\n  // const [userNotes, setUserNotes] = useState([])\n  // const [editsMade, setEditsMade] = useState(true)\n\n  // // Initially set the Title of a note\n  // const handleTitleChange = (event) => {\n  //   console.log('New Title', event.target.value)\n  //   setSelectedNote({\n  //     ...selectedNote,\n  //     title: event.target.value,\n  //   });\n  // };\n\n  // // Make updates to the content of the note\n  // const handleContentChange = (event) => {\n  //   console.log('New Content', event.target.value)\n  //   setSelectedNote({\n  //     ...selectedNote,\n  //     content: event.target.value,\n  //   });\n  // };\n\n  // // Save note function\n  // const handleSave = async () => {\n  //   // case where we are creating a new note\n  //   if (selectedNote.noteID == 'new_note'){\n  //     const response = await addNote(\n  //       selectedNote.userID,\n  //       selectedNote.date,\n  //       selectedNote.title,\n  //       selectedNote.content)\n  //     setUserNotes(response)\n  //   } else {\n  //   // case where we are creating a new note\n  //     const response = await updateNote(selectedNote.noteID, selectedNote.content)\n  //     userNotes[selectedInd] = response\n  //   }\n  //   // update the users stored notes\n  // }\n\n  // // handle select note or select new_note\n  // const handleSelectNote = (index) => {\n  //   if (index == 'new_note'){\n  //     setSelectedNote({\n  //       ...selectedNote,\n  //       noteID: 'new_note',\n  //       content: '',\n  //       title: '',\n  //       date: new Date().toLocaleString('en-US', { \n  //         timeZone: 'America/New_York', \n  //         year: '2-digit', \n  //         month: '2-digit', \n  //         day: '2-digit', \n  //         hour: '2-digit', \n  //         minute: '2-digit' \n  //       })\n  //     })\n  //   } else {\n  //     const note = userNotes[index]\n  //     setSelectedNote({\n  //       ...selectedNote,\n  //       noteID: note._id,\n  //       content: note.content,\n  //       date: note.date,\n  //       title: note.title\n  //   })\n  //   }\n  //   setSelectedInd(index)\n  // }\n\n  // const handleGetNotes = async () => {\n  //   const userNotes = await getNotes(user._id)\n  //   console.log('existing userNotes: ', userNotes)\n  //   setUserNotes(userNotes)\n  // }\n\n  // const handleDeleteNote = async () => {\n  //   // delete the note and update the list of displayed notes\n  //   const response = await deleteNote(selectedNote.userID, selectedNote.noteID)\n  //   handleGetNotes()\n\n  //   // reassign the selected note to be the first note in the list\n  //   if (userNotes != []){\n  //     // if the list is not empty assign the selected note to the first element\n  //     handleSelectNote(0)\n  //   } else {\n  //     // if the list is empty assign it to the new note editor\n      \n  //   }\n  // }\n\n  // // useEffect to generate a new list of notes each time:\n  // // - when a note is updated\n  // // - when a note is added or deleted\n  // // - when the component is initially rendered\n  // useEffect(() => {\n  //   console.log(`Calling useEffect to generate new notes`)\n  //   handleGetNotes()\n  // }, [])\n\n  return (\n    <div className='homeContainer'>\n      <ControlBar \n        notes={notes}\n        selected_ind={selectedInd}\n        selectNote={handleSelectNote} \n        handleSave={handleSave}\n        handleDeleteNote={handleDeleteNote}\n        editsMade={editsMade}/>\n      <NoteEditor \n        note={selectedNote}\n        handleTitleChange={handleTitleChange}\n        handleContentChange={handleContentChange}/>\n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}