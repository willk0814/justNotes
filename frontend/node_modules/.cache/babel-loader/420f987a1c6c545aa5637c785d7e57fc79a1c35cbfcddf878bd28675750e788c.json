{"ast":null,"code":"import axios from \"axios\";\n\n// Create new note\nexport async function addNote(userID, date, content) {\n  const data = {\n    userID: userID,\n    date: date,\n    content: content\n  };\n  try {\n    const response = await axios.post(`http://localhost:3000/api/addNote`, data);\n    console.log(\"response, \", response);\n    return response.data;\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\n// Query notes for a user\nexport async function getNotes(userID) {\n  console.log(`Retrieving notes for user: ${userID}`);\n  try {\n    const response = await axios.get(`http://localhost:3000/api/retrieveAllNotes`, {\n      params: {\n        userID: userID\n      }\n    });\n    console.log(\"response \", response.data);\n    return response.data;\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\n// Update existing notes\nexport async function updateNote(noteID, content) {\n  console.log(`Updating note:${noteID} with content:${content}`);\n  const data = {\n    noteID: noteID,\n    content: content\n  };\n  try {\n    const response = await axios.post(`http://localhost:3000/api/updateNote`, {\n      data: data\n    });\n    console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\n// Delete note\nexport async function deleteNote(userID, noteID) {\n  console.log(`Deleting note from user: ${userID} with id: ${noteID}`);\n  const data = {\n    userID: userID,\n    noteID: noteID\n  };\n  try {\n    const response = await axios.delete(\"http://localhost:3000/api/deleteNote\", {\n      data: data\n    });\n    console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.log(error.message);\n  }\n}","map":{"version":3,"names":["axios","addNote","userID","date","content","data","response","post","console","log","error","message","getNotes","get","params","updateNote","noteID","deleteNote","delete"],"sources":["/Users/willkoenig/Desktop/Personal Projects/Full Stack Practice/note-taking-app/src/services/noteFunctionalitiesServices.js"],"sourcesContent":["import axios from \"axios\";\n\n// Create new note\nexport async function addNote(userID, date, content) {\n    const data = {\n      userID: userID,\n      date: date,\n      content: content,\n    };\n    try {\n      const response = await axios.post(\n        `http://localhost:3000/api/addNote`,\n        data\n      );\n      console.log(\"response, \", response);\n      return response.data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n  \n\n// Query notes for a user\nexport async function getNotes(userID) {\n    console.log(`Retrieving notes for user: ${userID}`);\n    try {\n      const response = await axios.get(\n        `http://localhost:3000/api/retrieveAllNotes`,\n        {\n          params: {\n            userID: userID,\n          },\n        }\n      );\n      console.log(\"response \", response.data);\n      return response.data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n\n// Update existing notes\nexport async function updateNote(noteID, content) {\n    console.log(`Updating note:${noteID} with content:${content}`);\n    const data = {\n      noteID: noteID,\n      content: content,\n    };\n    try {\n      const response = await axios.post(`http://localhost:3000/api/updateNote`, {\n        data: data,\n      });\n      console.log(response.data);\n      return response.data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n\n// Delete note\nexport async function deleteNote(userID, noteID) {\n    console.log(`Deleting note from user: ${userID} with id: ${noteID}`);\n    const data = {\n      userID: userID,\n      noteID: noteID,\n    };\n    try {\n      const response = await axios.delete(\n        \"http://localhost:3000/api/deleteNote\",\n        { data: data }\n      );\n      console.log(response.data);\n      return response.data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  }"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,eAAeC,OAAOA,CAACC,MAAM,EAAEC,IAAI,EAAEC,OAAO,EAAE;EACjD,MAAMC,IAAI,GAAG;IACXH,MAAM,EAAEA,MAAM;IACdC,IAAI,EAAEA,IAAI;IACVC,OAAO,EAAEA;EACX,CAAC;EACD,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAC9B,mCAAkC,EACnCF,IACF,CAAC;IACDG,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEH,QAAQ,CAAC;IACnC,OAAOA,QAAQ,CAACD,IAAI;EACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdF,OAAO,CAACC,GAAG,CAACC,KAAK,CAACC,OAAO,CAAC;EAC5B;AACF;;AAGF;AACA,OAAO,eAAeC,QAAQA,CAACV,MAAM,EAAE;EACnCM,OAAO,CAACC,GAAG,CAAE,8BAA6BP,MAAO,EAAC,CAAC;EACnD,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMN,KAAK,CAACa,GAAG,CAC7B,4CAA2C,EAC5C;MACEC,MAAM,EAAE;QACNZ,MAAM,EAAEA;MACV;IACF,CACF,CAAC;IACDM,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEH,QAAQ,CAACD,IAAI,CAAC;IACvC,OAAOC,QAAQ,CAACD,IAAI;EACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdF,OAAO,CAACC,GAAG,CAACC,KAAK,CAACC,OAAO,CAAC;EAC5B;AACF;;AAEF;AACA,OAAO,eAAeI,UAAUA,CAACC,MAAM,EAAEZ,OAAO,EAAE;EAC9CI,OAAO,CAACC,GAAG,CAAE,iBAAgBO,MAAO,iBAAgBZ,OAAQ,EAAC,CAAC;EAC9D,MAAMC,IAAI,GAAG;IACXW,MAAM,EAAEA,MAAM;IACdZ,OAAO,EAAEA;EACX,CAAC;EACD,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAE,sCAAqC,EAAE;MACxEF,IAAI,EAAEA;IACR,CAAC,CAAC;IACFG,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACD,IAAI,CAAC;IAC1B,OAAOC,QAAQ,CAACD,IAAI;EACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdF,OAAO,CAACC,GAAG,CAACC,KAAK,CAACC,OAAO,CAAC;EAC5B;AACF;;AAEF;AACA,OAAO,eAAeM,UAAUA,CAACf,MAAM,EAAEc,MAAM,EAAE;EAC7CR,OAAO,CAACC,GAAG,CAAE,4BAA2BP,MAAO,aAAYc,MAAO,EAAC,CAAC;EACpE,MAAMX,IAAI,GAAG;IACXH,MAAM,EAAEA,MAAM;IACdc,MAAM,EAAEA;EACV,CAAC;EACD,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMN,KAAK,CAACkB,MAAM,CACjC,sCAAsC,EACtC;MAAEb,IAAI,EAAEA;IAAK,CACf,CAAC;IACDG,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACD,IAAI,CAAC;IAC1B,OAAOC,QAAQ,CAACD,IAAI;EACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdF,OAAO,CAACC,GAAG,CAACC,KAAK,CAACC,OAAO,CAAC;EAC5B;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}