{"ast":null,"code":"var _jsxFileName = \"/Users/willkoenig/Desktop/Personal Projects/Full Stack Practice/note-taking-app/frontend/src/components/HomeDir/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n\n// Import created components\nimport ControlBar from './ControlBar';\nimport NoteEditor from './NoteEditor';\n\n// Import note operation functions\nimport { addNote, getNotes, updateNote, deleteNote } from '../../services/noteFunctionalitiesServices';\n\n// Import stylesheet\nimport './Home.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home({\n  user\n}) {\n  _s();\n  // State var to hold the note currently displayed by the editor\n  const [selectedNote, setSelectedNote] = useState({\n    userID: user._id,\n    noteID: 'new_note',\n    title: '',\n    content: '',\n    editedContent: '',\n    date: new Date().toLocaleString('en-US', {\n      timeZone: 'America/New_York',\n      year: '2-digit',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    })\n  });\n  const [selectedInd, setSelectedInd] = useState('new_note');\n  const [userNotes, setUserNotes] = useState([]);\n  const [editsMade, setEditsMade] = useState(true);\n\n  // Initially set the Title of a note\n  const handleTitleChange = event => {\n    setSelectedNote({\n      ...selectedNote,\n      title: event.target.value\n    });\n  };\n\n  // Make updates to the content of the note\n  const handleContentChange = event => {\n    setSelectedNote({\n      ...selectedNote,\n      editedContent: event.target.value\n    });\n\n    // Update userNotes with the latest editedContent\n    setUserNotes(prevUserNotes => {\n      const updatedUserNotes = [...prevUserNotes];\n      if (selectedInd !== 'new_note') {\n        updatedUserNotes[selectedInd] = {\n          ...updatedUserNotes[selectedInd],\n          editedContent: newEditedContent\n        };\n      }\n      return updatedUserNotes;\n    });\n  };\n\n  // Save note function\n  const handleSave = async () => {\n    // case where we are creating a new note\n    if (selectedNote.noteID == 'new_note') {\n      const response = await addNote(selectedNote.userID, selectedNote.date, selectedNote.title, selectedNote.editedContent);\n\n      // Update user notes to include the newest node\n      setUserNotes(response);\n    } else {\n      // case where we are creating a new note\n      const updatedNote = await updateNote(selectedNote.noteID, selectedNote.editedContent);\n      updatedNote.editedContent = updatedNote.content;\n      const newUserNotes = [...userNotes];\n      newUserNotes[selectedInd] = updatedNote;\n      setUserNotes(newUserNotes);\n    }\n    // update the users stored notes\n  };\n\n  // handle select note or select new_note\n  const handleSelectNote = index => {\n    if (index == 'new_note') {\n      setSelectedNote({\n        ...selectedNote,\n        noteID: 'new_note',\n        content: '',\n        editedContent: '',\n        title: '',\n        date: new Date().toLocaleString('en-US', {\n          timeZone: 'America/New_York',\n          year: '2-digit',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit'\n        })\n      });\n    } else {\n      console.log('Notes on note switch: ', userNotes);\n      const note = userNotes[index];\n      setSelectedNote({\n        ...selectedNote,\n        noteID: note._id,\n        content: note.content,\n        editedContent: note.editedContent,\n        date: note.date,\n        title: note.title\n      });\n    }\n    setSelectedInd(index);\n  };\n\n  // Function to pull notes from database\n  const handleGetNotes = async () => {\n    // retrieve notes from database\n    const userNotes = await getNotes(user._id);\n    // add an edited content item to each of the notes\n    for (const note of userNotes) {\n      note.editedContent = note.content;\n    }\n    setUserNotes(userNotes);\n  };\n  const handleDeleteNote = async () => {\n    // delete the note and update the list of displayed notes\n    const response = await deleteNote(selectedNote.userID, selectedNote.noteID);\n    console.log('Response from delete note', response);\n\n    // remove the deleted note from the displayed notes\n    setUserNotes(prevUserNotes => prevUserNotes.filter(note => note._id !== response._id));\n\n    // reassign the selected note to be the first note in the list\n    if (userNotes != []) {\n      // if the list is not empty assign the selected note to the first element\n      handleSelectNote(0);\n    } else {\n      // if the list is empty assign it to the new note editor\n    }\n  };\n\n  // useEffect to generate a new list of notes each time:\n  // - when a note is updated\n  // - when a note is added or deleted\n  // - when the component is initially rendered\n  useEffect(() => {\n    handleGetNotes();\n  }, []);\n  useEffect(() => {\n    if (selectedNote.content === selectedNote.editedContent) {\n      setEditsMade(false);\n    } else {\n      setEditsMade(true);\n    }\n  }, [selectedNote]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"homeContainer\",\n    children: [/*#__PURE__*/_jsxDEV(ControlBar, {\n      notes: userNotes,\n      selected_ind: selectedInd,\n      selectNote: handleSelectNote,\n      handleSave: handleSave,\n      handleDeleteNote: handleDeleteNote,\n      editsMade: editsMade\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NoteEditor, {\n      note: selectedNote,\n      handleTitleChange: handleTitleChange,\n      handleContentChange: handleContentChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"2fA9ZIcWejYvm1Pi+5k4gFcDqyM=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","ControlBar","NoteEditor","addNote","getNotes","updateNote","deleteNote","jsxDEV","_jsxDEV","Home","user","_s","selectedNote","setSelectedNote","userID","_id","noteID","title","content","editedContent","date","Date","toLocaleString","timeZone","year","month","day","hour","minute","selectedInd","setSelectedInd","userNotes","setUserNotes","editsMade","setEditsMade","handleTitleChange","event","target","value","handleContentChange","prevUserNotes","updatedUserNotes","newEditedContent","handleSave","response","updatedNote","newUserNotes","handleSelectNote","index","console","log","note","handleGetNotes","handleDeleteNote","filter","className","children","notes","selected_ind","selectNote","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/willkoenig/Desktop/Personal Projects/Full Stack Practice/note-taking-app/frontend/src/components/HomeDir/Home.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\n\n// Import created components\nimport ControlBar from './ControlBar'\nimport NoteEditor from './NoteEditor'\n\n// Import note operation functions\nimport { addNote, \n  getNotes, \n  updateNote, \n  deleteNote } from '../../services/noteFunctionalitiesServices'\n\n// Import stylesheet\nimport './Home.css'\n\nexport default function Home({ user }) {\n\n  // State var to hold the note currently displayed by the editor\n  const [selectedNote, setSelectedNote] = useState({\n    userID: user._id,\n    noteID: 'new_note',\n    title: '',\n    content: '',\n    editedContent: '',\n    date: new Date().toLocaleString('en-US', { \n      timeZone: 'America/New_York', \n      year: '2-digit', \n      month: '2-digit', \n      day: '2-digit', \n      hour: '2-digit', \n      minute: '2-digit' })\n  })\n\n  const [selectedInd, setSelectedInd] = useState('new_note')\n  const [userNotes, setUserNotes] = useState([])\n  const [editsMade, setEditsMade] = useState(true)\n\n  // Initially set the Title of a note\n  const handleTitleChange = (event) => {\n    setSelectedNote({\n      ...selectedNote,\n      title: event.target.value,\n    });\n  };\n\n  // Make updates to the content of the note\n  const handleContentChange = (event) => {\n    setSelectedNote({\n      ...selectedNote,\n      editedContent: event.target.value,\n    });\n\n    // Update userNotes with the latest editedContent\n    setUserNotes((prevUserNotes) => {\n      const updatedUserNotes = [...prevUserNotes];\n      if (selectedInd !== 'new_note') {\n        updatedUserNotes[selectedInd] = {\n          ...updatedUserNotes[selectedInd],\n          editedContent: newEditedContent,\n        };\n      }\n      return updatedUserNotes;\n    });\n  };\n\n  // Save note function\n  const handleSave = async () => {\n    // case where we are creating a new note\n    if (selectedNote.noteID == 'new_note'){\n      const response = await addNote(\n        selectedNote.userID,\n        selectedNote.date,\n        selectedNote.title,\n        selectedNote.editedContent)\n      \n      // Update user notes to include the newest node\n      setUserNotes(response)\n    } else {\n    // case where we are creating a new note\n      const updatedNote = await updateNote(selectedNote.noteID, selectedNote.editedContent)\n      updatedNote.editedContent = updatedNote.content\n\n      const newUserNotes = [...userNotes]\n      newUserNotes[selectedInd] = updatedNote\n      \n      setUserNotes(newUserNotes)\n    }\n    // update the users stored notes\n  }\n\n  // handle select note or select new_note\n  const handleSelectNote = (index) => {\n    if (index == 'new_note'){\n      setSelectedNote({\n        ...selectedNote,\n        noteID: 'new_note',\n        content: '',\n        editedContent: '',\n        title: '',\n        date: new Date().toLocaleString('en-US', { \n          timeZone: 'America/New_York', \n          year: '2-digit', \n          month: '2-digit', \n          day: '2-digit', \n          hour: '2-digit', \n          minute: '2-digit' \n        })\n      })\n    } else {\n      console.log('Notes on note switch: ', userNotes)\n      const note = userNotes[index]\n      setSelectedNote({\n        ...selectedNote,\n        noteID: note._id,\n        content: note.content,\n        editedContent: note.editedContent,\n        date: note.date,\n        title: note.title\n      })\n    }\n    setSelectedInd(index)\n  }\n\n  // Function to pull notes from database\n  const handleGetNotes = async () => {\n    // retrieve notes from database\n    const userNotes = await getNotes(user._id)\n    // add an edited content item to each of the notes\n    for (const note of userNotes){\n      note.editedContent = note.content\n    }\n    setUserNotes(userNotes)\n  }\n\n  const handleDeleteNote = async () => {\n    // delete the note and update the list of displayed notes\n    const response = await deleteNote(selectedNote.userID, selectedNote.noteID)\n    console.log('Response from delete note', response)\n    \n    // remove the deleted note from the displayed notes\n    setUserNotes((prevUserNotes) => \n      prevUserNotes.filter((note) => note._id !== response._id))\n\n    // reassign the selected note to be the first note in the list\n    if (userNotes != []){\n      // if the list is not empty assign the selected note to the first element\n      handleSelectNote(0)\n    } else {\n      // if the list is empty assign it to the new note editor\n      \n    }\n  }\n\n  // useEffect to generate a new list of notes each time:\n  // - when a note is updated\n  // - when a note is added or deleted\n  // - when the component is initially rendered\n  useEffect(() => {\n    handleGetNotes()\n  }, [])\n\n  useEffect(() => {\n    if (selectedNote.content === selectedNote.editedContent){\n      setEditsMade(false)\n    } else {\n      setEditsMade(true)\n    }\n  }, [selectedNote])\n\n  return (\n    <div className='homeContainer'>\n      <ControlBar \n        notes={userNotes}\n        selected_ind={selectedInd}\n        selectNote={handleSelectNote} \n        handleSave={handleSave}\n        handleDeleteNote={handleDeleteNote}\n        editsMade={editsMade}/>\n      <NoteEditor \n        note={selectedNote}\n        handleTitleChange={handleTitleChange}\n        handleContentChange={handleContentChange}/>\n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}